name: 'Setup Node.js with Cache'
description: 'Setup Node.js with intelligent caching and security checks'
author: 'Your Organization'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  package-manager:
    description: 'Package manager to use (npm, yarn, pnpm)'
    required: false
    default: 'npm'
  cache-dependency-path:
    description: 'Path to package-lock.json, yarn.lock, or pnpm-lock.yaml'
    required: false
    default: ''
  registry-url:
    description: 'Registry URL for npm packages'
    required: false
    default: 'https://registry.npmjs.org'
  check-latest:
    description: 'Check for latest available version that satisfies the version spec'
    required: false
    default: 'false'
  run-audit:
    description: 'Run security audit after installation'
    required: false
    default: 'true'

outputs:
  node-version:
    description: 'The installed Node.js version'
    value: ${{ steps.setup.outputs.node-version }}
  cache-hit:
    description: 'A boolean value to indicate if a cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}
  package-manager:
    description: 'The detected package manager'
    value: ${{ steps.detect-pm.outputs.package-manager }}

runs:
  using: 'composite'
  steps:
    - name: Detect package manager
      id: detect-pm
      shell: bash
      run: |
        if [[ "${{ inputs.package-manager }}" != "npm" && "${{ inputs.package-manager }}" != "yarn" && "${{ inputs.package-manager }}" != "pnpm" ]]; then
          # Auto-detect package manager
          if [[ -f "pnpm-lock.yaml" ]]; then
            echo "package-manager=pnpm" >> $GITHUB_OUTPUT
          elif [[ -f "yarn.lock" ]]; then
            echo "package-manager=yarn" >> $GITHUB_OUTPUT
          elif [[ -f "package-lock.json" ]]; then
            echo "package-manager=npm" >> $GITHUB_OUTPUT
          else
            echo "package-manager=npm" >> $GITHUB_OUTPUT
          fi
        else
          echo "package-manager=${{ inputs.package-manager }}" >> $GITHUB_OUTPUT
        fi
        
        echo "🔍 Detected package manager: $(cat $GITHUB_OUTPUT | grep package-manager | cut -d'=' -f2)"

    - name: Setup Node.js
      id: setup
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        check-latest: ${{ inputs.check-latest }}
        registry-url: ${{ inputs.registry-url }}
        cache: ${{ steps.detect-pm.outputs.package-manager }}
        cache-dependency-path: ${{ inputs.cache-dependency-path }}

    - name: Install pnpm
      if: steps.detect-pm.outputs.package-manager == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install Yarn
      if: steps.detect-pm.outputs.package-manager == 'yarn'
      shell: bash
      run: |
        corepack enable
        yarn --version

    - name: Get cache directory
      id: cache-dir
      shell: bash
      run: |
        PM="${{ steps.detect-pm.outputs.package-manager }}"
        case $PM in
          npm)
            echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
            ;;
          yarn)
            echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
            ;;
          pnpm)
            echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Cache dependencies
      id: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ steps.cache-dir.outputs.dir }}
          node_modules
        key: ${{ runner.os }}-${{ steps.detect-pm.outputs.package-manager }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.detect-pm.outputs.package-manager }}-

    - name: Install dependencies
      shell: bash
      run: |
        PM="${{ steps.detect-pm.outputs.package-manager }}"
        echo "📦 Installing dependencies with $PM"
        
        case $PM in
          npm)
            npm ci --prefer-offline --no-audit
            ;;
          yarn)
            yarn install --frozen-lockfile --prefer-offline
            ;;
          pnpm)
            pnpm install --frozen-lockfile --prefer-offline
            ;;
        esac

    - name: Security audit
      if: inputs.run-audit == 'true'
      shell: bash
      continue-on-error: true
      run: |
        PM="${{ steps.detect-pm.outputs.package-manager }}"
        echo "🔒 Running security audit with $PM"
        
        case $PM in
          npm)
            npm audit --audit-level=moderate || echo "⚠️ Security audit found issues"
            ;;
          yarn)
            yarn audit || echo "⚠️ Security audit found issues"
            ;;
          pnpm)
            pnpm audit || echo "⚠️ Security audit found issues"
            ;;
        esac

    - name: Display environment info
      shell: bash
      run: |
        echo "✅ Setup completed successfully"
        echo "📊 Environment Information:"
        echo "  - Node.js: $(node --version)"
        echo "  - Package Manager: ${{ steps.detect-pm.outputs.package-manager }}"
        echo "  - NPM: $(npm --version)"
        if command -v yarn &> /dev/null; then
          echo "  - Yarn: $(yarn --version)"
        fi
        if command -v pnpm &> /dev/null; then
          echo "  - PNPM: $(pnpm --version)"
        fi
        echo "  - Cache Hit: ${{ steps.cache.outputs.cache-hit }}"