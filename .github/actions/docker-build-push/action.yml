name: 'Docker Build and Push'
description: 'Build, scan, and push Docker images with security checks'
author: 'Your Organization'

inputs:
  image-name:
    description: 'Name of the Docker image'
    required: true
  image-tag:
    description: 'Tag for the Docker image'
    required: false
    default: 'latest'
  dockerfile-path:
    description: 'Path to Dockerfile'
    required: false
    default: './Dockerfile'
  build-context:
    description: 'Build context path'
    required: false
    default: '.'
  registry:
    description: 'Docker registry URL'
    required: false
    default: 'ghcr.io'
  push:
    description: 'Whether to push the image'
    required: false
    default: 'true'
  scan-image:
    description: 'Whether to scan image for vulnerabilities'
    required: false
    default: 'true'
  build-args:
    description: 'Build arguments (newline-separated)'
    required: false
    default: ''
  target:
    description: 'Build target stage'
    required: false
    default: ''
  platforms:
    description: 'Target platforms for build'
    required: false
    default: 'linux/amd64'

outputs:
  image:
    description: 'Full image name with registry and tag'
    value: ${{ steps.meta.outputs.tags }}
  digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  metadata:
    description: 'Build result metadata'
    value: ${{ steps.build.outputs.metadata }}
  scan-results:
    description: 'Security scan results'
    value: ${{ steps.scan.outputs.results }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ inputs.image-tag }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.build-context }}
        file: ${{ inputs.dockerfile-path }}
        target: ${{ inputs.target }}
        platforms: ${{ inputs.platforms }}
        build-args: ${{ inputs.build-args }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: false
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Scan image for vulnerabilities
      if: inputs.scan-image == 'true'
      id: scan
      uses: anchore/scan-action@v3
      with:
        image: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}
        fail-build: false
        severity-cutoff: high

    - name: Upload vulnerability report
      if: inputs.scan-image == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report-${{ github.run_id }}
        path: ${{ steps.scan.outputs.sarif }}

    - name: Display scan results
      if: inputs.scan-image == 'true'
      shell: bash
      run: |
        echo "🔍 Security scan completed"
        if [[ -f "${{ steps.scan.outputs.sarif }}" ]]; then
          echo "📊 Vulnerability report generated"
          # Display summary of findings
          if command -v jq &> /dev/null; then
            CRITICAL=$(jq '.runs[0].results[] | select(.level == "error") | length' "${{ steps.scan.outputs.sarif }}" 2>/dev/null || echo "0")
            HIGH=$(jq '.runs[0].results[] | select(.level == "warning") | length' "${{ steps.scan.outputs.sarif }}" 2>/dev/null || echo "0")
            MEDIUM=$(jq '.runs[0].results[] | select(.level == "note") | length' "${{ steps.scan.outputs.sarif }}" 2>/dev/null || echo "0")
            
            echo "  - Critical: $CRITICAL"
            echo "  - High: $HIGH"  
            echo "  - Medium: $MEDIUM"
          fi
        fi

    - name: Push Docker image
      if: inputs.push == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.build-context }}
        file: ${{ inputs.dockerfile-path }}
        target: ${{ inputs.target }}
        platforms: ${{ inputs.platforms }}
        build-args: ${{ inputs.build-args }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      if: inputs.push == 'true'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      if: inputs.push == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.run_id }}
        path: sbom.spdx.json

    - name: Summary
      shell: bash
      run: |
        echo "🐳 Docker build completed successfully"
        echo "📦 Image: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}"
        echo "🏗️  Platforms: ${{ inputs.platforms }}"
        echo "🔒 Security scan: ${{ inputs.scan-image == 'true' && '✅ Enabled' || '❌ Disabled' }}"
        echo "📤 Push: ${{ inputs.push == 'true' && '✅ Enabled' || '❌ Disabled' }}"
        
        if [[ "${{ inputs.push }}" == "true" ]]; then
          echo "🎯 Image pushed to: ${{ steps.meta.outputs.tags }}"
          echo "🔗 Digest: ${{ steps.build.outputs.digest }}"
        fi